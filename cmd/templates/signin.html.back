<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8" />

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>



    <link rel="stylesheet" href="signin.css">
    <style>
    html {
        height: 100%;
    }

    body {
        font-family: sans-serif;
        height: 100%;
        margin: 0px;
        padding: 0px;
        background-image: linear-gradient(#383f89, #8d2b2c);
    }

    .signin-container {
        color: white;
        max-width: 250px;
        margin: 100px auto;
        padding: 5% 4%;
    }

    .signin-string, a {
        text-align: center;
        color: white;
        text-decoration: none;
        font-weight: bold;
    }

    label {
        font-size: 0.9em;
    }

    input, button {
        width: 100%;
        padding: 12px 20px;
        margin: 8px 0;
        border: 1px solid white;
        border-radius: 4px;
        box-sizing: border-box;
    }

    button, input[type="submit"] {
        padding: 7px 20px;
        color: #573663;
        background-color: #e1d2d2;
        font-size: 1em;
        font-weight: bold;
    }

    input{
        background-color: #441c6800;
        color: white;
        caret-color: white;
    }

    input[type=text] {
    }

    input[type=text]:focus {
    }

    input[type=password] {
    }

    input[type=password]:focus {
    }
    </style>

</head>

<body>
<div class="signin-container">

    <p class="signin-string"><a href="/">setonotes</a></p>

    <div class="input-field">
        <label>username</label><br>
        <input id="username" name="username" type="text" value="" autofocus>
    </div>

    <div class="input-field">
        <label>password</label><br>
        <input id="password" name="password" type="password" value="">
    </div>

    <button onclick="go()"><b>Sign In</b></button>

</div>

<form id="hiddenAuthForm" method="POST">
    <input id="username-hidden" type="hidden" name="username">
    <input id="password-hidden" type="hidden" name="password">
</form>

</body>

<script>

function go() {
    let request_data = JSON.stringify({
        username: document.getElementById('username').value,
    });

    $.ajax({
        type: 'POST',
        url: '/api/salts',
        //dataType: 'json',
        data: request_data,
        success: function(response){

            // get both authentication and encryption salt
            let auth_salt = response.auth_salt;
            let encryption_salt = response.encryption_salt;

            // get submitted password
            let plain_text_password = document.getElementById('password').value;

            // compute auth key
            const auth_key = getBitsFromPassword(plain_text_password,
                auth_salt);

            // populate hiddenAuthForm
            //document.getElementById("username-hidden").value = username;
            //document.getElementById("password-hidden").value = auth_key;

            // submit
        },
        error: function(){
            console.log('TODO: Replace this with a user-facing error.');
        },
    });
}

/**
 * Get ArrayBuffer of PBKDF2 bits from the given (password, salt) pair
 */
function getBitsFromPassword(password, salt) {
    let encoder = new TextEncoder();

    const password_buffer = window.crypto.subtle.importKey(
        "raw",
        encoder.encode(password),
        {name: "PBKDF2"},
        false,
        ["deriveBits", "deriveKey"]
    )
    .then(function(key){
        return key;
    });
    console.log('TEST. password_buffer: ' + password_buffer);
    /*
    .then(function(password_buffer){
        console.log('TEST. got key: ' + password_buffer);

        window.crypto.subtle.deriveBits(
            {
                "name": "PBKDF2",
                salt: salt,
                "iterations": 3e5,
                "hash": "SHA-256"
            },
            password_buffer,
            256
        )
        .then(function(bits){
            console.log('TEST. got bits: ' + bits);
        });
    });
    */
    /*
    return window.crypto.subtle.deriveBits(
        {
            "name": "PBKDF2",
            salt: salt,
            "iterations": 3e5,
            "hash": "SHA-256"
        },
        password_buffer,
        256
    );
    */
}

</script>

</html>
